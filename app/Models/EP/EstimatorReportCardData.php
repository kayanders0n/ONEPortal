<?php

namespace Models\EP;

use Core\Model;

class EstimatorReportCardData extends Model
{
    /**
     * @param array $filters
     * @param string $limit
     *
     * @return array
     */
    public function selectEstimatorReportCardData(array $filters = [], string $limit = ''): array
    {
        $item_id     = (int) ($filters['item_id'] ?? null);
        $company_id  = (int) ($filters['company_id'] ?? null);
        $builder_id  = (int) ($filters['builder_id'] ?? null);

        $param_sql = [
            ':BUILDER_ID' => $builder_id,
            ':PROJECT_ID' => $item_id
        ];

        $select_sql = "SELECT
                       PROJECT.SEQNO AS PROJECT_SEQNO,
                       PROJECT.TABLEID AS PROJECT_NUM,
                       PROJECT.DESCRIPT AS PROJECT_NAME,
                       BUILDER.DESCRIPT AS BUILDER_NAME,
                       (SELECT FIRST 1 EMPLOYEE.SEQNO FROM TASKS_ENTITY_EMPLOYEE INNER JOIN EMPLOYEE ON (TASKS_ENTITY_EMPLOYEE.EMPLOYEEID = EMPLOYEE.SEQNO) WHERE TASKS_ENTITY_EMPLOYEE.SOURCEENTITYID = $company_id AND ((TASKS_ENTITY_EMPLOYEE.ENTITYID = PROJECT.OWNERID) OR (TASKS_ENTITY_EMPLOYEE.ENTITYID IS NULL)) ORDER BY TASKS_ENTITY_EMPLOYEE.ENTITYID DESC NULLS LAST) AS ESTIMATOR_SEQNO,
                       (SELECT FIRST 1 EMPLOYEE.DESCRIPT FROM TASKS_ENTITY_EMPLOYEE INNER JOIN EMPLOYEE ON (TASKS_ENTITY_EMPLOYEE.EMPLOYEEID = EMPLOYEE.SEQNO) WHERE TASKS_ENTITY_EMPLOYEE.SOURCEENTITYID = $company_id AND ((TASKS_ENTITY_EMPLOYEE.ENTITYID = PROJECT.OWNERID) OR (TASKS_ENTITY_EMPLOYEE.ENTITYID IS NULL)) ORDER BY TASKS_ENTITY_EMPLOYEE.ENTITYID DESC NULLS LAST) AS ESTIMATOR_NAME,
                       (SELECT COUNT(*) FROM JOBSITE WHERE JOBSITE.PROJECTID = PROJECT.SEQNO) AS JOBSITE_COUNT,
                       (SELECT COUNT(*) FROM JOB WHERE JOB.SOURCEENTITYID = $company_id AND JOB.PROJECTID = PROJECT.SEQNO) AS JOB_COUNT,
                       (SELECT MAX(COSTDATE) FROM PROJECTPLANS WHERE ISPROJECTOPTIONS = 1 AND SOURCEENTITYID = $company_id AND ((PROJECTID = PROJECT.SEQNO) OR ((PROJECTID = CASE WHEN 5633 = $company_id THEN PROJECT.LINKPLUMBINGPROJECTID WHEN 21440 = $company_id THEN PROJECT.LINKCONCRETEPROJECTID WHEN 21442 = $company_id THEN PROJECT.LINKFRAMINGPROJECTID WHEN 21444 = $company_id THEN PROJECT.LINKDOORANDTRIMPROJECTID END)))) AS OPTIONS_COSTDATE,
                       (SELECT MAX(PROPOSALADDENDUM.COSTDATE) FROM PROPOSAL INNER JOIN PROPOSALADDENDUM ON (PROPOSAL.ADDENDUMID = PROPOSALADDENDUM.SEQNO) WHERE PROPOSAL.SOURCEENTITYID = $company_id AND PROPOSAL.PROJECTID = PROJECT.SEQNO) AS PROPOSAL_COSTDATE,
                       (SELECT MAX(PROPOSAL.CONTRACTDATE) FROM PROPOSAL WHERE PROPOSAL.SOURCEENTITYID = $company_id AND PROPOSAL.PROJECTID = PROJECT.SEQNO) AS PROPOSAL_CONTRACTDATE,
                       (SELECT COUNT(*) FROM TASKS WHERE DATASEQNOID = PROJECT.SEQNO AND DATATYPEID = 26 AND CATEGORYID = 75115708 AND TYPEID = 88981139 AND ENTITYID = $company_id AND COMPLETED = 0) AS PROJECT_CHANGEREQ_COUNT,
                       (SELECT 1-( NULLIF(SUM(PROPOSALSUMMARY.COST),0) /  NULLIF(SUM(PROPOSALSUMMARY.PRICE),0)) FROM PROPOSAL INNER JOIN PROPOSALPLANS ON (PROPOSAL.SEQNO = PROPOSALPLANS.PROPOSALID) INNER JOIN PROPOSALSUMMARY ON (PROPOSAL.ADDENDUMID = PROPOSALSUMMARY.ADDENDUMID) AND (PROPOSALPLANS.SEQNO = PROPOSALSUMMARY.PROPOSALPLANID) WHERE PROPOSAL.PROJECTID = PROJECT.SEQNO AND PROPOSAL.SOURCEENTITYID = $company_id AND PROPOSALPLANS.VOIDADDENDUMID = 0) AS PRICE_MARGIN,
                       (SELECT COUNT(*) FROM JOB LEFT OUTER JOIN PROJECTPLANS ON (JOB.PROJECTPLANID = PROJECTPLANS.SEQNO) WHERE JOB.PROJECTID = PROJECT.SEQNO AND JOB.SOURCEENTITYID = $company_id AND JOB.CREATEDON > CURRENT_DATE - 45 AND PROJECTPLANS.PLANCODE <> '0000') AS JOB_ACTIVITY,
                       (SELECT OPTION_COUNT FROM CHECK_PROJECTOPTIONS_MARKUP(PROJECT.SEQNO, $company_id)) AS OPTIONS_MARKUP_COUNT,
                       (SELECT COUNT(*) FROM DOCUMENTSLINK WHERE DOCUMENTSLINK.CATEGORYID = 18351441 AND DOCUMENTSLINK.TYPEID = 28693713 AND DOCUMENTSLINK.DATATYPEID = 26 AND DOCUMENTSLINK.DATASEQNOID = PROJECT.SEQNO) AS RB_FLDCON_COUNT,
                       (SELECT COUNT(*) FROM DOCUMENTSLINK WHERE DOCUMENTSLINK.CATEGORYID = 18351441 AND DOCUMENTSLINK.TYPEID = 74107920 AND DOCUMENTSLINK.DATATYPEID = 26 AND DOCUMENTSLINK.DATASEQNOID = PROJECT.SEQNO) AS RB_PLANS_COUNT,
                       (SELECT COUNT(*) FROM DOCUMENTSLINK INNER JOIN DOCUMENTS ON (DOCUMENTSLINK.DOCUMENTID = DOCUMENTS.SEQNO) WHERE DOCUMENTS.SOURCEENTITYID = $company_id AND DOCUMENTSLINK.DATATYPEID = 26 AND DOCUMENTSLINK.DATASEQNOID = PROJECT.SEQNO AND DOCUMENTS.ISCONTRACT = 1 AND DOCUMENTS.ISSIGNED = 1 AND ((DOCUMENTS.DOCUMENTDATE <= CURRENT_DATE) AND ((DOCUMENTS.DOCUMENTEXPIREDATE IS NULL) OR (DOCUMENTS.DOCUMENTEXPIREDATE >= CURRENT_DATE)))) AS SIGNED_CONTRACT_COUNT,
                       (SELECT COUNT(*) AS ITEM_COUNT FROM JOB INNER JOIN JOBBILLINGADJ ON (JOBBILLINGADJ.JOBID = JOB.SEQNO) WHERE JOBBILLINGADJ.CREATEDON > CURRENT_DATE - 45 AND JOB.SOURCEENTITYID = $company_id AND JOB.PROJECTID = PROJECT.SEQNO AND JOBBILLINGADJ.CATEGORYID = 6648 AND JOBBILLINGADJ.TYPEID IN (286842680, 286842703, 286842858)) AS BILLING_ADJ,
                       (SELECT COUNT(*) FROM JOBSITE INNER JOIN PLAR_DOCUMENT ON (JOBSITE.SEQNO = PLAR_DOCUMENT.JOBSITEID) WHERE JOBSITE.PROJECTID = PROJECT.SEQNO AND PLAR_DOCUMENT.SOURCEENTITYID = $company_id AND PLAR_DOCUMENT.DELETED = 0 AND PLAR_DOCUMENT.ASSIGNEDEMPLOYEEID > 0 AND PLAR_DOCUMENT.INDEXED = 1 AND PLAR_DOCUMENT.PROCESSED = 0 AND PLAR_DOCUMENT.REVIEWED = 0) AS PO_REVIEW_NEEDED,
                       (SELECT LINKPROJECT.TABLEID FROM PROJECT LINKPROJECT WHERE LINKPROJECT.SEQNO = PROJECT.LINKPLUMBINGPROJECTID) AS PLU_LINKPROJECT_NUM,
                       (SELECT LINKPROJECT.TABLEID FROM PROJECT LINKPROJECT WHERE LINKPROJECT.SEQNO = PROJECT.LINKCONCRETEPROJECTID) AS CON_LINKPROJECT_NUM,
                       (SELECT LINKPROJECT.TABLEID FROM PROJECT LINKPROJECT WHERE LINKPROJECT.SEQNO = PROJECT.LINKFRAMINGPROJECTID) AS FRA_LINKPROJECT_NUM,
                       (SELECT LINKPROJECT.TABLEID FROM PROJECT LINKPROJECT WHERE LINKPROJECT.SEQNO = PROJECT.LINKDOORANDTRIMPROJECTID) AS DAT_LINKPROJECT_NUM,
                       BUILDER.SEQNO AS BUILDER_SEQNO,
                       BUILDER.ISBLANKETPRELIEN AS BUILDER_ISBLANKETPRELIEN,
                       PROJECT.PLUMBINGESTVALUE AS PLU_EST_VALUE,
                       PROJECT.CONCRETEESTVALUE AS CON_EST_VALUE,
                       PROJECT.FRAMINGESTVALUE AS FRA_EST_VALUE,
                       PROJECT.CROSSROADS AS PROJECT_CROSSROADS,
                       PROJECT.ADDRESS1 AS PROJECT_ADDRESS1,
                       PROJECT.ZIP AS PROJECT_ZIP,
                       PROJECT.LATITUDE AS PROJECT_LATITUDE,
                       PROJECT.LONGITUDE AS PROJECT_LONGITUDE,
                       PROJECT.GLPREFIX AS PROJECT_GLPREFIX,
                       PROJECT.CREATEDON AS PROJECT_CREATEDON,
                       PROJECT.MODIFIEDON AS PROJECT_MODIFIEDON,
                       PROJECT.CREATEBYNAME AS PROJECT_CREATEDBY,
                       PROJECT.MODIFIEDBYNAME AS PROJECT_MODIFIEDBY,
                       PROJECT.NOTE AS PROJECT_NOTE,
                       STATUSCODES.DESCRIPT AS STATUS_NAME,
                       PROJECT.USERINT01,
                       PROJECT.USERINT02,
                       PROJECT.USERINT03 " . PHP_EOL;

        $from_sql = 'FROM PROJECT
                     LEFT OUTER JOIN ENTITY BUILDER
                     ON (PROJECT.OWNERID = BUILDER.SEQNO)
                     LEFT OUTER JOIN STATUSCODES
                     ON (PROJECT.STATUSID = STATUSCODES.SEQNO) ' . PHP_EOL;

        $where_sql =  'WHERE 1 = 1 ';
        $where_sql .= $item_id ? 'AND PROJECT.SEQNO = :PROJECT_ID ': '';
        $where_sql .= 'AND PROJECT.COMPLETED = 0 ' . PHP_EOL;
        $where_sql .= 'AND PROJECT.STATUSID IN (6629, 6636) ' . PHP_EOL;
        $where_sql .= 'AND (PROJECT.TYPEID  NOT IN(6674, 12476479)) ' . PHP_EOL;
        $where_sql .= $builder_id ? 'AND PROJECT.OWNERID = :BUILDER_ID ': '';

        switch ($company_id) {
            case PLUMBING_ENTITYID:
                $where_sql .= "AND PROJECT.ISPLUMBING = 1 " . PHP_EOL;
                break;
            case CONCRETE_ENTITYID:
                $where_sql .= "AND PROJECT.ISCONCRETE = 1 " . PHP_EOL;
                break;
            case FRAMING_ENTITYID:
                $where_sql .= "AND PROJECT.ISFRAMING = 1 " . PHP_EOL;
                break;
            case DOORTRIM_ENTITYID:
                $where_sql .= "AND PROJECT.ISDOORANDTRIM = 1 " . PHP_EOL;
                break;
        }

        $order_sql  = 'ORDER BY 1 DESC ';

        $limit_sql = $limit ?: '';

        $query = $this->db->select($select_sql . $from_sql . $where_sql . $order_sql . $limit_sql, $param_sql);

        return [$query, count($query)];
    }

    /**
     * @param $request
     *
     * @return int
     */

    public function updateEstimatorReportCardData($request): int
    {

        $company_id = (int) ($request['company_id'] ?? null);
        $price_increase = (int) ($request['price_increase'] ?? null);

        $price_flag = array();
        switch ($company_id) {
            case PLUMBING_ENTITYID:
                $price_flag = ['USERINT01' => $price_increase];
                break;
            case CONCRETE_ENTITYID:
                $price_flag = ['USERINT02' => $price_increase];
                break;
            case FRAMING_ENTITYID:
                $price_flag = ['USERINT03' => $price_increase];
                break;
        }


        $update = [
            'MODIFIEDBYNAME'     => $request['user_name'],
            'MODIFIEDON'         => date('m/d/Y H:i:s')
        ];

        $update = array_merge($update, $price_flag);

        $where = ['SEQNO' => (int) $request['item_id']];

        return $this->db->update('PROJECT', $update, $where);
    }
}
